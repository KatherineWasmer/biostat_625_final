# Main workflow
install_packages_and_libraries()

data <- load_and_clean_data("cleaned_data_v2.csv")
data <- preprocess_data(data)

# Split data
split <- split_data(data, target_col = "cardio")
train_data <- split$train
test_data <- split$test

# Prepare matrices
train_matrix <- prepare_dmatrix(train_data, "cardio")
test_matrix <- prepare_dmatrix(test_data, "cardio")

# Hyperparameter tuning
tune_grid <- expand.grid(
  nrounds = c(50, 100, 150),
  max_depth = c(3, 6),
  eta = c(0.01, 0.1),
  gamma = c(0, 1),
  colsample_bytree = c(0.6, 0.8),
  min_child_weight = c(1, 3),
  subsample = c(0.6, 0.8)
)

tuning_result <- tune_xgboost(train_data, "cardio", tune_grid)
print("Best Hyperparameters:")
print(tuning_result$model$bestTune)

cat("Hyperparameter tuning time (seconds):", tuning_result$tuning_time, "\n")

# Train final model
final_model_result <- train_final_xgboost(train_matrix, tuning_result$model$bestTune, 
                                          tuning_result$model$bestTune$nrounds)

cat("Final model training time (seconds):", final_model_result$training_time, "\n")

# Total time
total_time <- (tuning_result$tuning_time + final_model_result$training_time)/ 60
cat("Total elapsed time (min):", total_time, "\n")

# Evaluate model
evaluation <- evaluate_model(final_model_result$model, test_matrix, test_data$cardio)
print(evaluation$conf_matrix)
print(paste("AUC:", evaluation$auc_score))
plot(evaluation$roc_curve, col = "blue", lwd = 2, main = "ROC Curve for XGBoost Model")

# Plot feature importance
plot_feature_importance(final_model_result$model, colnames(train_data[, -which(names(train_data) == "cardio")]))
